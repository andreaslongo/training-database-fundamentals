[{"uri":"https://training.andreaslongo.com/6-advanced-concepts/relationships/","title":"Beziehungen","tags":[],"description":"","content":"Mit Beziehungen zwischen einzelnen Tabellen können wir unsere Daten strukturieren. Wir können verschiedene Arten von Beziehungen nutzen, um unterschiedliche Gegebenheiten aus der realen Welt zu modellieren.\n Mit relationalen Datenbank können drei Arten von Beziehungen hergestellt werden:\n   Eins zu Eins (one to one)\n  Eins zu Mehreren (one to many\n  Mehrere zu Mehrere (many to many)\n   Die \u0026#34;Eins zu Eins\u0026#34; Beziehung Eins zu Eins Beziehungen werden über die Primärschlüssel (Primary Keys) von Tabellen hergestellt.\n classDiagram Mitarbeiter \"1\" -- \"1\" MitarbeiterDetails class Mitarbeiter{ MitarbeiterID: Key Vorname Nachname Telefonnummer Email ... } class MitarbeiterDetails{ MitarbeiterID: Key Gehalt Kontonummer Sozialversicherungsnummer ... }  Mit einer solchen Aufteilung kannst du zum Beispiel schützenswerte Informationen über einen Mitarbeiter nur für bestimmte Zwecke freigeben. Soll zum Beispiel ein Mitarbeiter einen Newsletter an alle Mitarbeiter schicken, kannst du ihn nur für die Tabelle Mitarbeiter freigeben. Er sieht damit nicht automatisch das Gehalt von jedem Mitarbeiter.\n Wenn wir die beiden Primärschlüssel miteinander verbinden, entsteht eine \u0026#34;Eins zu Eins\u0026#34; Beziehung. Jede MitarbeiterID, die du aus der Tabelle Mitarbeiter auswählst wird auch nur einmal in der MitarbeiterDetails Tabelle gefunden\n   Die \u0026#34;Eins zu Mehreren\u0026#34; Beziehung Dies ist die am häufigsten genutzte Beziehung.\n classDiagram Kunden \"1\" -- \"*\" Bestellungen class Kunden{ KundenID: Key Vorname Nachname Adresse ... } class Bestellungen{ BestellungenID: Key KundenID Produkt Preis ... }  Wenn wir die beiden Tabellen über die Spalte KundenID verbinden, entsteht eine \u0026#34;Einz zu Mehreren\u0026#34; Verbindung. Wir hoffen natürlich, dass ein Kunde nicht nur eine, sondern mehrere Bestellungen bei uns tätigt.\n Jede KundenID kann mehrmals in der Tabelle Bestellungen stehen. Jeder Kunde kann also mehrere Bestellungen aufgeben. Aber, jede Bestellung kann maximal von einem Kunden getätigt werden.\n Setzen wir nun noch die NOT NULL Regel in der Bestellungen Tabelle auf der KundenID Spalte, dann muss für eine Bestellung immer auch ein Kunden eingetragen sein.\n   Die \u0026#34;Mehrere zu Mehrere\u0026#34; Beziehung Ein Schüler belegt mehrere Schulfächer. An einem Schulfach, einer Unterrichtsstunde, nehmen mehrere Schüler teil.\n Um diese Beziehung abzubilden, benötigen wir eine weitere Tabelle (Junction-Tabelle).\n classDiagram Schüler \"1\" -- \"*\" Einschreibungen Schulfach \"1\" -- \"*\" Einschreibungen class Schüler { SchülerID: Key Vorname Nachname Hauptfach ... } class Schulfach { SchulfachID: Key Lehrer RaumNummer ... } class Einschreibungen { EinschreibungID: Key SchülerID SchulfachID Jahrgangsstufe ... }  Jeder Datensatz in der Einschreibungen Tabelle wird mit einem Schüler und einem Schulfach verknüpft.\n Jeder Schüler steht mehrmals in der Einschreibungen Tabelle und jedes Schulfach steht ebenfalls mehrmals in der Tabelle Einschreibungen.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/database-server/","title":"Der Datenbankserver","tags":[],"description":"","content":"Wenn wir mit Datenbanken arbeiten, reden wir oft vom Datenbankserver. Aber wozu brauchen wir diesen?\n Was macht ein Datenbankserver? Ein Datenbankserver stellt unsere Datenbanken bereit, damit wir mit ihnen arbeiten können.\n Auf dem Datenbankserver läuft unsere Database Management System (DBMS) Software. Wenn wir ein DBMS installieren, erstellen wir damit eine sogenannte Instanz. Eine DBMS Installation ist also eine Instanz unseres Datenbanksystems.\n Ein Server kann mehrere DBMS Instanzen zeitgleich und unabhängig voneinander betreiben. Im der Regel installieren wir aber nur eine Instanz pro Server.\n Nachdem du eine Instanz installiert hast, kannst du dich über das Netzwerk mit dieser Instanz verbinden.\n   Du schickst Befehle an die Instanz.\n  Die Instanz bearbeitet die Befehle und sendet Ergebnisse an dich zurück.\n   Auch alle anderen Benutzer deiner Datenbank verbinden sich über das Netzwerk mit der Instanz. Das sind die Clients deines Datenbanksystems. Jede Verbindung zu deinem Server ist eine Client-Verbindung.\n   Das Server System Wir können einen Datenbankserver auf einem physikalischer Server oder auf einem virtuellen Server betreiben. Beides hat seine Vor- und Nachteile und es kommt immer auf die aktuellen Situation an, welches die beste Lösung ist.\n Datenbankserver sollen oft große Datenmengen schnellstmöglich verarbeiten. Das stellt hohe Anforderungen an Hardware Ressourcen wie Prozessoren, Arbeitsspeicher und Festplattenspeicher.\n Für ein schnelles Datenbanksystem solltest du folgende Punkte beachten:\n   Schnelle Festplatten für Lese- und Schreibzugriffe\n  Viel Arbeitsspeicher um die Festplatten zu entlasten\n  Mehrere Prozessoren um viele Berechnungen gleichzeitig ausführen zu können\n  Schnelle Netzwerkverbindung um die Daten bereitzustellen\n   Für sehr große Datenbanksysteme können einzelne Server zu einem Cluster gebündelt werden. Wir können damit die Arbeitslast auf mehrere Server aufteilen. Außerdem können wir damit eine Ausfallsicherheit erreichen. Einzelne Cluster Systeme können dabei an unterschiedlichen Orten, zum Beispiel in unterschiedlichen Rechenzentren stehen.\n   Dein eigener Datenbankserver Wenn du nach diesem Kurs noch weiter mit Datenbanken experimentieren möchtest, kannst du dir deinen eigenen Datenbankserver auf deinem Computer installieren.\n Microsoft SQL Server Express In diesem Kurs nutzen wir Microsoft SQL Server als unser DBMS.\n Die SQL Server Express Edition lässt sich auf fast jedem beliebigen Windows Computer installieren. Es sind nicht alle Funktionen der \u0026#34;größeren\u0026#34; Editionen enthalten. Dafür brauchst du für die Installation aber auch keine eigene Server Hardware.\n Die Express Edition ist trotzdem ein vollwertiges Datenbanksystem. Du kannst dir damit alle Beispiele aus diesem Kurs noch einmal selbst anschauen.\n    "},{"uri":"https://training.andreaslongo.com/1-start/","title":"Start","tags":[],"description":"","content":"Bevor wir mit dem Kurs beginnen  Start "},{"uri":"https://training.andreaslongo.com/5-more-sql/transactions/","title":"Transaktionen","tags":[],"description":"","content":"In diesem Abschnitt beschäftigen wir uns mit SQL-Befehlen zum bearbeiten von Datensätzen. Diese Befehle basieren auf sogenannten Transaktionen.\n Was sind Transaktionen? Zum Beispiel ist das Hinzufügen neuer Datensätze eine Transaktion.\n Eine Transaktion kann entweder erfolgreich sein (alles OK) oder fehlschlagen. Schlägt eine Transaktion fehl, dann macht das Datenbanksystem alle Änderungen innerhalb dieser Transaktion rückgängig. Das ist ein Sicherheitsmechanismus des Datenbanksystems um Probleme innerhalb einzelner Datensätze zu vermeiden.\n   Eine erfolgreiche Transaktion Stelle dir zum Beispiel vor, du möchtest einen neuen Kunden in deiner Tabelle Kunden erfassen.\n   Du startest damit eine Transaktion.\n  Die Kundennummer wird erfolgreich gespeichert.\n  Der Vorname wird erfolgreich gespeichert.\n  Der Nachname wird erfolgreich gespeichert.\n   Damit ist der Datensatz komplett und die Transaktion erfolgreich abgeschlossen.\n   Eine fehlgeschlagene Transaktion Nun möchtest du einen weiteren Kunden hinzufügen.\n   Du startest damit eine weitere Transaktion.\n  Die Kundennummer wird erfolgreich gespeichert.\n  Der Vorname wird erfolgreich gespeichert.\n  Der Nachname kann nicht gespeichert werden, du bekommst eine Fehlermeldung.\n   Damit du in einem solche Fall keine unvollständigen Datensätze in deiner Datenbank hast, macht das Datenbanksystem die komplette Transaktion rückgängig. Kundennummer und Vorname werden also wieder entfernt. Sonst hättest du einen Kunden in deiner Datenbank ohne Nachnamen.\n   Große und kleine Transaktionen Es gibt auch größere Transaktionen. Du könntest zum Beispiel 100 neue Kunden auf einmal eintragen. Kommt es bei einem dieser Kunden zu Problemen, wird auch hier die gesamte Transaktion rückgängig gemacht.\n Durch Transaktionen kannst du dir immer sicher darüber sein, was in deiner Datenbank gespeichert wird und was nicht. Es wird entweder alles gespeichert, oder im Fehlerfall nichts.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/sql-language/","title":"Was ist SQL?","tags":[],"description":"","content":"Die Structured Query Language (SQL) ist eine weit verbreitete Sprache, ähnlich einer Programmiersprache, zur Verwaltung von relationalen Datenbanken.\n Mit SQL kannst du…​\n   Datenstrukturen erstellen\n  Datensätze erfassen und ändern\n  Datensätze abfragen\n  …​\n   Microsoft SQL Server nutzt eine Variante der SQL Standardsprache und nennt diese Transact SQL (T-SQL). Diese Variante erweitert die grundlegende Sprache SQL um einige Zusatzkomponenten.\n In diesem Kurs befassen wir uns mit der grundlegenden Sprache SQL. Du wirst also die SQL Anweisungen aus diesem Kurs oder zumindest Teile davon auf fast jedem anderen SQL basierten Datenbanksystem einsetzen können.\n SQL Anweisungen Nachdem du gelernt hast, wie du Aktionen mit dem Management Studio ausführen kannst, schauen wir uns nun einige Grundlagen der SQL Sprache an.\n Mit SQL kannst du so gut wie alle Aktionen aus dem Management Studio \u0026#34;programmieren\u0026#34;. Du kannst damit einzelne Aktionen genauer steuern und diese bei Bedarf mehrfach und auch automatisch ausführen. Außerdem kannst du deinen SQL Anweisungen speichern und später wiederverwenden.\n   SQL-Befehle Hier findest du eine Übersicht der am häufigsten verwendeten SQL-Befehle.\n Folgende Befehle werden verwendet, um die Strukturen einer Datenbank zu definieren. Du kannst damit Datenbank Objekte, wie zum Beispiel Tabellen, Views oder ganze Datenbanken erstellen oder ändern.\n CREATE\tDROP USE\tTRUNCATE ALTER   Die nächsten Befehle erlauben es dir, mit Datensätzen zu arbeiten. Du kannst damit Datensätze abfragen, erstellen, ändern oder löschen.\n INSERT\tSELECT UPDATE\tDELETE MERGE     Regeln der SQL Sprache Bevor wir unsere eigenen SQL Anweisungen schreiben, solltest wir uns noch einige Regeln der Sprache anschauen.\n Groß- und Kleinschreibung SQL unterscheidet nicht zwischen Groß- und Kleinschreibung. Der Befehl USE ist gleich use, uSe oder Use.\n Schreibe jedoch deine Befehle immer in Großbuchstaben. Damit kannst du deinen Anweisungen leichter lesen.\n USE [meineDatenbank]; SELECT Artikel,Kunde,Datum,Preis FROM Tabelle_1;    Leerzeichen SQL ignoriert Leerzeichen. Das erlaubt es dir, deinen Anweisungen mit Leerzeichen zu formatieren. Damit kannst du deinen Code leichter lesen.\n USE [meineDatenbank]; SELECT Artikel, Kunde, Datum, Preis FROM Tabelle_1;    Abschluss einer Anweisung Nutze am Ende jeder Anweisung das sogenannte Statement Terminator Zeichen ;.\n Damit signalisierst du dem Programm, dass die Anweisung beendet ist und mit der nächsten Anweisung weitergemacht werden kann.\n  Kommentare Du kannst Kommentare in deinen SQL Code einfügen. Kommentare werden nicht ausgeführt. Damit kannst du zum Beispiel Notizen in deinem Code hinterlegen.\n /* Dies ist ein Block-Kommentar Er kann mehrere Zeilen lang sein. */ USE [meineDatenbank]; -- Dies ist ein Zeilenkommentar, er ist nur eine Zeile lang. SELECT artikel, kunde FROM tabelle_1;      Automatische Vorschläge im Management Studio Wenn du SQL Code im Management Studio schreibst, bekommst du automatisch Vorschläge zu Anweisungen oder Objekten, die du verwenden kannst. Diese Funktion nennt sich IntelliSense.\n IntelliSense warnt dich auch, wenn es Fehler in deiner Anweisung entdeckt und markiert die Stellen entsprechend.\n Manchmal kann es notwendig sein IntelliSense neu zu laden. Drücke STRG+Shift+R wenn du keine oder falsche Vorschläge von IntelliSense bekommst.\n   "},{"uri":"https://training.andreaslongo.com/2-databases/databases/","title":"Was sind Datenbanken?","tags":[],"description":"","content":"Datenbanken sind ein zentraler Bestandteil unseres modernen Lebens. Sie kommen überall dort zum Einsatz, wo Informationen jeglicher Art gespeichert und verarbeitet werden. Du nutzt täglich mehrere Datenbanken, ohne davon etwas zu merken.\n Datenbanken findest du beispielsweise…​\n   in Rechenzentren\n  auf deinem Computer\n  auf deinem Smartphone\n  auf deinem Fernsehgerät\n  …​\n   Aber was sind Datenbanken überhaupt und welche Vorteile bringen sie uns in der Welt der Datenverarbeitung?\n Was sind Daten? In der Informatik und Datenverarbeitung verstehen wir unter Daten eine digitale Repräsentation von Information.\n Angenommen du schreibst dir eine Liste mit Filmen, die du dir gerne anschauen möchtest. Tust du das auf einem Blatt Papier, erzeugst du damit analoge Daten. Nutzt du deinen Computer und speicherst die Liste in eine Datei, dann erzeugst du digitale Daten.\n Du überlegst dir also, welche Informationen du für deine Liste benötigst, zum Beispiel den Titel des Films. Dann digitalisierst du diese Informationen aus deinem Kopf, indem du sie in einer Datei speicherst. Du erzeugst damit Daten aus Informationen.\n   Was ist eine Bank? Du bringst vermutlich dein Geld zu einer Bank.\n Die Bank sorgt dafür, dass das Geld auf deinem Konto…​\n   sicher verwahrt ist,\n  du es jederzeit abrufen kannst,\n  und, dass sich nicht ungewollt etwas an deinem Kontostand ändert.\n   In der Informatik und Datenverarbeitung kannst du deine Daten zu einer Datenbank bringen.\n   Was ist eine Datenbank? Eine Datenbank ist zunächst einmal eine strukturierte Ansammlung von Daten.\n Das kann eine einfache Liste auf einem Blatt Papier sein, wie zum Beispiel eine Einkaufsliste. Es kann auch eine Tabelle sein, beispielsweise ein Schulstundenplan.\n Wenn wir in der Informatik über eine Datenbank reden, meinen wir jedoch üblicherweise eine Computerdatei zum speichern von digitalen Daten.\n In einer solchen Datei legen wir Strukturen fest, um unsere Daten dort einsortieren zu können. Wir tun das oft in der Form von Tabellen und Spalten. Wir legen außerdem Regeln fest, an die sich unsere Daten halten müssen. Wir möchten zum Beispiel nicht, dass eine E-Mail Adresse in einer Spalte für Vornamen eingetragen wird.\n Mit Hilfe einer Datenbank können wir auf sehr flexible Weise Daten speichern und abrufen.\n   Was ist ein Datenbanksystem? Bei einer echten Bank hast du ein Konto. Dort legst du dein Geld ab. Die Bank verwaltet dein Konto und noch viele weitere Konten von anderen Kunden.\n Nun hast du eine Datenbank. Dort speicherst du deine Daten. Ein Datenbanksystem verwaltet deine Datenbank und noch viele weitere Datenbanken.\n Ein Datenbanksystem sorgt dafür, dass die Daten in deiner Datenbank…​\n   sicher verwahrt sind,\n  du sie jederzeit abrufen kannst,\n  und, dass sich nicht ungewollt etwas an deinen Daten ändert.\n   Das Datenbanksystem sorgt dafür, dass die festgelegten Strukturen und Regeln für deine Daten eingehalten werden.\n   "},{"uri":"https://training.andreaslongo.com/7-end/next-steps/","title":"Wie geht es weiter?","tags":[],"description":"","content":"Vielen Dank für deine Teilnahme :-) Wir sind damit am Ende unseres Kurses angelangt. Ich hoffe du hast viel Neues gelernt und fühlst dich nun gut gerüstet, für deine Arbeit mit Datenbanken.\n Wenn du Fragen hast oder wenn dich einfach etwas interessiert, darfst du dich gerne an mich wenden. Du erreichst mich am besten per Email.\n   Was kannst du tun? Wenn du dein Wissen vertiefen und weiter mit Datenbanken arbeiten möchtest, kannst du dir dein eigenes DBMS auf deinem Computer installieren.\n Du kannst dir dazu eine Version des Microsoft SQL Server Express kostenlos herunterladen.\n SQL Server Express ist sehr ähnlich zu dem, was du in diesem Kurs kennengelernt hast. Du kannst dich dann mit dem Management Studio zu deinem eigenen SQL Server Express verbinden und dir die Beispiele aus dem Kurs noch einmal in aller Ruhe anschauen.\n Experimentiere ruhig ein wenig und probiere neue, vielleicht auch eigene Sachen und Ideen aus. Das ist die beste Methode zum Lernen.\n Die Beispiele aus diesem Kurs findest du hier:\n   Beispiele\n   Die .sql Dateien enthalten unsere SQL Abfragen. Du kannst sie dir im Management Studio anschauen. Die .bak Dateien enthalten Backups unserer Beispieldatenbanken. Diese kannst du als neue Datenbank auf deinem Server restoren.\n   Wie geht es mit diesem Kurs weiter? Dies ist die erste Version meines Kurses \u0026#34;Einstieg Datenbanken\u0026#34;. Der Kurs wird von mir, mehr oder weniger regelmäßig, überarbeitet. Fehler werden korrigiert, Kapitel werden angepasst oder ergänzt oder es kommen neue Kapitel hinzu.\n Alle Änderungen findet du hier auf dieser Seite. Es kann sich also lohnen, wenn du ab und an vorbeischaust.\n Falls dir Fehler oder sonst etwas auffällt, freue ich mich über eine Kurze Nachricht von dir, damit ich diese korrigieren kann.\n   "},{"uri":"https://training.andreaslongo.com/1-start/welcome/","title":"Willkommen","tags":[],"description":"","content":"Ich heiße dich herzliche Willkommen zu unserem ersten Kurs \u0026#34;Einstieg Datenbanken\u0026#34;.\n In diesem Kurs lernst du grundlegenden Konzepte kennen, die dir die Arbeit mit Datenbanken ermöglichen. Der Kurs soll dir ein solides Grundwissen vermitteln, das dir in deiner gesamten IT-Karriere nützlich sein wird.\n Am Ende des Kurses wirst du…​\n   verschiedene Modelle zur Speicherung von Daten kennen.\n  Datenbanken grundlegend administrieren und verwalten können.\n  Objekte einer Datenbank und Datensätze erstellen und bearbeiten können.\n  deine erste eigene Datenbank erstellt haben.\n  Grundlagen der SQL Sprache kennen.\n  Einen Einblick in fortgeschrittene Konzepte wie Beziehungen, Indizes und Schemas haben.\n   Das Thema Datenbanken ist nicht ganz einfach. Wir werden einige komplizierte und komplexe Themen anschneiden. Ärgere dich also nicht, wenn du nicht alles gleich auf Anhieb verstehst. Du kannst dir die Webseite zum Kurs jederzeit und in aller Ruhe noch einmal anschauen.\n "},{"uri":"https://training.andreaslongo.com/2-databases/database-system/","title":"Das Datenbanksystem","tags":[],"description":"","content":"Ein Datenbanksystem besteht aus zwei Komponenten:\n   eine oder mehrere Datenbanken\n  eine Verwaltungssoftware, das Database Management System (DBMS)\n   Das Database Management System (DBMS) ist ein Programm zum Erstellen und Verwalten von Datenbanken.\n Zum Vergleich: Microsoft Excel ist ein Programm zum Erstellen und Verwalten von Kalkulationstabellen.\n Ein DBMS stellt dir einen hoch-strukturierten und effizienten Speichermechanismus für deine Daten zur Verfügung.\n Vielleicht hast du schon einmal von den verschiedenen SQL basierten DBMS gehört. Zu den populärsten gehören MySQL, PostgreSQL, SQLite, und Microsoft SQL Server. All diese Systeme sind mit dem SQL Standard konform, den du später noch kennenlernen wirst.\n Funktionen eines DBMS Ein DBMS hilft dir bei diesen Aufgaben.\n  Festlegen von Strukturen und Regeln für deine Daten\n  Du legst Strukturen und Regeln fest, an die sich deine Daten halten müssen.\n  Das DBMS sorgt dafür, dass diese Strukturen und Regeln eingehalten werden.\n     Erfassen von Daten\n  Du speicherst Daten in der vorgegebenen Struktur.\n  Das DBMS sorgt dafür, dass die Daten organisiert und konsistent in der Datenbank gespeichert werden.\n     Abrufen von Daten\n  Du rufst Daten aus deiner Datenbank ab.\n  Das DBMS sorgt dafür, dass du deine Daten schnell und zuverlässig abrufen kannst.\n     Schützen von Daten\n  Du möchtest deine Daten vor unberechtigten Zugriffen schützen.\n  Das DBMS steuert Zugriffe über Benutzer (Logins) und deren Berechtigungen.\n  Du möchtest deine Daten vor Verlust und Zerstörung schützen.\n  Das DMBS bietet dir Wartungs- und Sicherungsfunktionen (Backups) dafür an.\n        Microsoft SQL Server In diesem Kurs nutzen wir Microsoft SQL Server als unser DBMS.\n SQL Server ist ein zuverlässiges DBMS und wird seit vielen Jahren von kleinen bis großen Unternehmen genutzt. Es ist eines der DBMS Systeme, die am besten mit Microsoft Windows kompatibel sind.\n Im weiteren Verlauf des Kurses wirst du mit Hilfe des DBMS Strukturen und Regeln für deine Daten festlegen. Du wirst Daten in einer Datenbank speichern und lernen, wie du Daten aus der Datenbank abrufen kannst.\n   "},{"uri":"https://training.andreaslongo.com/2-databases/","title":"Datenbanken","tags":[],"description":"","content":"Modelle zur Speicherung von Daten  Datenbanken "},{"uri":"https://training.andreaslongo.com/4-sql-language/create/","title":"Der CREATE Befehl","tags":[],"description":"","content":"Mit CREATE kannst du neue Objekte erstellen.\n Eine Tabelle erstellen Du kannst zum Beispiel eine neue Tabelle in deiner Datenbank anlegen.\n Öffne im Management Studio deine Datenbank, suche dir eine Tabelle aus und starte den Designer. Du siehst das Design der Tabelle.\n Beispiel Tabelle Table 1. Mitarbeiter (Tabelle)     Column Name Data Type AllowNulls     MitarbeiterID\n int\n    Vorname\n nvarchar(50)\n    Nachname\n nvarchar(50)\n    Job\n nvarchar(50)\n x\n   Email\n nvarchar(50)\n     Die Spalte MitarbeiterID ist hier als Identity Feld konfiguriert (Identity Specification: yes), damit die Spalte automatisch mit ID Nummern befüllt wird. Diese Spalte ist außerdem unser Primärschlüssel (Primary Key).\n Wir wollen nun die gleiche Tabelle mit SQL Anweisungen erstellen anstatt mit dem Designer.\n  SQL Anweisungen Klicke dazu im Management Studio auf New Query um eine neue Abfrage zu öffnen. Es erscheint nun ein Editor Fenster. Schreibe dort den den folgenden SQL Code hinen.\n CREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL );    Bevor du SQL Anweisungen ausführst…​ …​solltest du immer folgende Punkte beachten:\n   Stelle sicher, dass du mit der richtige Datenbank verbunden bist. Du erkennst das in der Statusleiste deiner Abfrage. Du siehst die aktive Datenbank auch in einem Drop-Down Feld. Dort kannst du die Verbindung bei Bedarf ändern.\n  Lasse deine Abfrage prüfen. Klicke dazu auf das Symbol mit dem grünen Haken oder nutze die Tasten STRG+F5\n    Die SQL Anweisung auführen Wenn du mit der richtigen Datenbank verbunden bist und du deine Abfrage geprüft hast, starte die Abfrage mit einem Klick auf Execute.\n Du hast nun eine neue Tabelle erstellt.\n    Eine neue Datenbank anlegen Mit CREATE kannst du auch eine komplett neue Datenbank anlegen.\n Öffne im Management Studio ein neues Query und schreibe Folgendes in den Editor:\n CREATE DATABASE MeineNeueDatenbank;   Prüfe nun deine Abfrage und starte sie.\n Du hast nun eine neue Datenbank erstellt.\n   "},{"uri":"https://training.andreaslongo.com/5-more-sql/select/","title":"Der SELECT Befehl","tags":[],"description":"","content":"Mit SELECT kannst du Datensätze aus einer Tabelle abfragen.\n Der Hauptgrund, warum wir Daten in einer Datenbank speichern ist, dass wir hinterher schnell und einfach Daten daraus abfragen können.\n Wir möchten verschiedene Datensätze kombinieren um spezielle Fragen zu beantworten wie zum Beispiel \u0026#34;Wie viele rote Pullover wurden im letzten Jahr an Kunden aus Salzburg verkauft?\u0026#34;. Du kannst deine Abfragen auf vielfältige und flexible weisen filtern um genau die Daten zu bekommen, die du benötigst.\n SELECT ist damit der am meisten verwendete SQL-Befehl.\n Datensätze abfragen Eine Spalte abfragen Öffne ein neues Query.\n Frage nun eine Spalte aus deiner Tabelle ab.\n USE [MeineNeueDatenbank]; SELECT Artikel FROM ProduktListe;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun die Einträge aus der Spalte Artikel\n  Mehrere Spalten abfragen Frage nun mehrere Spalten auf einmal ab.\n SELECT Artikel, Beschreibung FROM ProduktListe;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun die Einträge aus der Spalte Artikel und Beschreibung\n  Alle Spalten abfragen Frage nun alle Spalten der Tabelle auf einmal ab.\n SELECT * FROM ProduktListe;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun die Einträge aller Spalten aus der Tabelle.\n    Ergebnisse anpassen Du kannst die Namen der Spalten in deiner Ergebnisliste anpassen.\n SELECT Artikel AS [Der Artikelname], Beschreibung AS [Die Artikelbeschreibung] FROM ProduktListe;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun die Einträge aller Spalten aus der Tabelle. Die Spalten in den Ergebnissen haben andere Namen.\n   Die WHERE Klausel Mit der WHERE Klausel kannst du Datensätze in deiner Abfrage filtern.\n Mit WHERE kannst du Kriterien festlegen, die deine Datensätze erfüllen müssen um weiter verarbeitet zu werden. Du kannst damit zum Beispiel Änderungen an deinen Datensätze sehr genau steuern.\n Zum Beispiel kannst du eine Anweisung schreiben: \u0026#34;Ändere den Preis für Produkt Pullover, aber nur, wenn dessen Farbe rot ist.\u0026#34;\n Datensätze filtern In den bisherigen SELECT Abfragen hast du immer alle Datensätze deiner Tabelle als Ergebnis zurückbekommen. Jetzt möchten wir nur bestimmte Datensätze sehen.\n Produkte mit niedrigen Preisen anzeigen Du filterst also deine Ergebnisse mit Hilfe der WHERE Klausel.\n SELECT Artikel, Beschreibung, Preis FROM ProduktListe WHERE Preis \u0026lt; 50;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun alle Datensätzen bei denen der Preis niedriger als 50 ist.\n  Ein bestimmtes Produkt anzeigen Jetzt möchtest du alle Details eines bestimmten Produkts sehen.\n SELECT * FROM ProduktListe WHERE ProduktID = 5;   Du siehst nun alle Spalten des Produkts mit der ProduktID = 5.\n  Produkte mit anzeigen, die mit P anfangen Nun lasse dir alle Artikel anzeigen, die mit dem Buchstaben P anfangen.\n SELECT * FROM ProduktListe WHERE Artikel LIKE \u0026#39;P%\u0026#39;;   Du siehst nun alle Artikel, die mit P anfangen.\n     "},{"uri":"https://training.andreaslongo.com/6-advanced-concepts/constraints/","title":"Regeln (Constraints)","tags":[],"description":"","content":"Wenn wir Regeln für Spalten unserer Tabellen festlegen, können wir sicherstellen, dass die Daten in unseren Tabellen immer so gespeichert werden, wie wir es vorgeben.\n In SQL Server können wir sogenannte Constraints festlegen.\n Eine Constraint festlegen Wir möchten nun für unsere Tabelle Bestellungen festlegen, dass das Bestelldatum entweder der aktuelle Tag sein muss, oder in der Vergangenheit liegt.\n Damit stellen wir sicher, dass in einer Bestellung nicht fälschlicherweise ein Datum aus der Zukunft eingetragen ist. Wir können schließlich nicht vorhersehen, an welchem zukünftigen Tag jemand eine Bestellung tätigt.\n Öffne im Management Studio die Tabelle Bestellungen. Klicke mit der rechten Maustaste auf den Bereich Constraints und wähle New Constraint…​ Es öffnet sich ein neues Fenster in dem wir eine neue Constraint eintragen.\n Unter dem Punkt Expression tragen wir nun folgendes ein: Datum ⇐ GETDATE(). Das bedeutet, in unserer Tabelle Bestellungen dürfen in die Spalte Datum nur Werte eingetragen werden, die kleiner sind als das Ergebnis von GETDATE(). GETDATE() ist eine Funktion, die beim Aufruf immer das aktuelle Datum als Ergebnis zurückgibt.\n Wir ändern nun noch den Namen der Constraint beim Punkt Identity (Name) auf: CK_Bestellungen_Datum, damit wir später genau wissen, wofür die Constraint gedacht ist.\n Speichere nun deine Änderungen. Du siehst jetzt die neue Constraint unter dem Punkt Constraints deiner Tabelle.\n Teste nun dein Constraint indem du versuchst einen Wert in der Spalte Datum deiner Tabelle zu ändern.\n   Einen Unique Index festlegen Mit einem Unique Index kannst du festlegen, dass alle Werte in einer Spalte einzigartig sein müssen. Es dürfen also keine doppelten Einträge gemacht werden.\n Wir möchten nun in unserer Tabelle Mitarbeiter festlegen, dass in der Spalte Email keine doppelten Email Adressen eingetragen werden dürfen. Dazu legen wir einen sogenannten Unique Index an.\n Öffne nun im Management Studio den Designer für die Tabelle Mitarbeiter. Klicke mit der rechten Maustaste auf eine freie Fläche des Designers und wähle Indexes/Keys…​ aus. Es öffnet sich ein neues Fenster in dem wir Keys und Indizes konfigurieren können.\n Wir sehen dort schon einen Eintrag PK_Mitarbeiter. Das ist unser früher festgelegte Primary Key auf der Spalte MitarbeiterID.\n Wir fügen nun mit Add einen neuen Index hinzu. Unter dem Punkt (General) ändern wir den Wert von Is Unique auf Yes. Bei Columns tragen wir die Spalte Email ein. Ändern noch den Namen des Indexes beim Punkt Identity (Name) auf: UIX_Mitarbeiter_Email, damit du ihn später wiederfindest.\n Schließe nun die Fenster und speichere die Einstellungen der Tabelle. Du siehst jetzt unter dem Punkt Indexes deiner Tabelle einen neuen Unique Index.\n Durch den Unique Index erlaubt es das Datenbanksystem nun nicht mehr, dass zwei Mitarbeiter dieselbe Email Adresse haben.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/install-sql-express/","title":"SQL Server Express installieren","tags":[],"description":"","content":"Vorbereitung  Installiere alle Updates für dein Betriebssystem (Windows Updates)\n  Starte die Installation mit einem klick auf die SQL Server Datei, die du zur Vorbereitung auf diesen Kurs heruntergeladen hast.\n   Es werden nun einige Dateien auf deinen Computer geladen. Wenn der Prozess abgeschlossen ist, siehst du ein neues Verzeichnis, welches eine SETUP.exe Datei enthält.\n   Installation Starte das SQL Server Installation Center mit einem Klick auf die SETUP.exe.\n  Klicke im Menü auf Installation\n  Wähle New SQL Server stand-alone installation or add features to an existing installation aus\n  Akzeptiere die Lizenzverainbarungen\n   Das Setup zeigt dir jetzt eventuell fehlende Anforderungen an, die du erfüllen musst, bevor du die Software installieren kannst. Weitere Infos zu den Anforderungen zeigt dir das Setup. Sind alle Anforderungen erfüllt, kommst du zur Feature Selection Liste.\n  Wähle folgende Features aus\n  Database Engine Services\n  Management Tools - Basic\n  Management Tools - Complete\n     Im Instance Configuration Bildschirm, gib deiner Instanz den Namen SQL\n  Server Configuration → Service Accounts, Collation\n  Database Engine Configuration → Authentication Mode, sa account, Data Directories\n  Documentation Website\n  Installation Log Files\n     "},{"uri":"https://training.andreaslongo.com/1-start/requirements/","title":"Was du benötigst","tags":[],"description":"","content":"Für unsere Live-Schulung benötigst du…​   einen Internetzugang\n  Microsoft Teams mit Mikrofon, Headset oder Ähnlichem\n  und eine aktuelle Version des SQL Server Management Studios, fertig installiert auf deinem Computer\n     Bitte bereite alles einen Tag vor Beginn der Schulung vor Lade das SQL Server Management Studio herunter und installiere es auf deinem Computer. Dabei ist nichts weiter zu beachten. Die Setup Routine führt dich durch die Installation.\n Testet bitte dein Mikrofon mit Microsoft Teams und startet einmal das Management Studio.\n   Download Management Studio (640 MB)   https://aka.ms/ssmsfullsetup (direkt link)\n  https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms\n     "},{"uri":"https://training.andreaslongo.com/3-database-server/","title":"Datenbank Server","tags":[],"description":"","content":"Bereitstellen von Datenbanken  Datenbank Server "},{"uri":"https://training.andreaslongo.com/5-more-sql/insert/","title":"Der INSERT Befehl","tags":[],"description":"","content":"Mit INSERT kannst du neue Datensätze in eine Tabelle eintragen.\n Datensätze eintragen Füge einen neuen Datensatz in die Tabelle Mitarbeiter ein.\n USE [MeineNeueDatenbank]; INSERT INTO Mitarbeiter VALUES (\u0026#39;Martin\u0026#39;, \u0026#39;Hofer\u0026#39;, \u0026#39;IT Support\u0026#39;, \u0026#39;mhofer@example.com\u0026#39;) ;   Du kannst nun den neuen Eintrag in deiner Tabelle sehen.\n Nutze SELECT um dir alle Einträge anzuzeigen.\n   Datensätzen gezielt eintragen Im letzten Beispiel hast du die Werte (Values) für deinen neuen Datensatz nach der Position der Spalten in deiner Tabelle eingetragen. Die erste Spalte in deiner Tabelle ist FirstName, also ist der erste Wert in deiner Abfrage der Vorname, usw.. Dein Datenbanksystem trägt die Werte also anhand ihrer Position in deiner Abfrage ein.\n Im nächsten Beispiel siehst du, wie du die Spalten selbst bestimmen kannst. Du kannst damit zum Beispiel nur bestimmte Spalten ausfüllen (sofern es deine Regeln erlauben — NOT NULL?) Oder du kannst die Reihenfolge ändern, wenn du beispielsweise zuerst die Email Adresse eintragen möchtest.\n INSERT INTO Mitarbeiter (Email, Vorname, Nachname) VALUES (\u0026#39;mpichler@example.com\u0026#39;, \u0026#39;Mathias\u0026#39;, \u0026#39;Pichler\u0026#39;), (\u0026#39;sscherer@example.com\u0026#39;, \u0026#39;Stefan\u0026#39;, \u0026#39;Scherer\u0026#39;) ;   Du hast nun zwei neue Datensätze in deine Tabelle eingetragen.\n Lasse dir die Einträge mit SELECT anzeigen.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/use/","title":"Der USE Befehl","tags":[],"description":"","content":"Mit USE kannst du eine Datenbank auswählen.\n Du kannst damit sicherstellen, dass Anweisungen auf der gewünschten Datenbank ausgeführt werden und nicht auf der falschen Datenbank.\n Du kannst die aktive Datenbank auch mit dem Drop-Down Feld im Management Studio auswählen. USE hat den gleichen Effekt.\n Datenbank mit dem Management Studio auswählen Öffne ein neues Query mit New Query.\n Wähle nun die master Datenbank im Drop-Down Feld, und führe folgende Anweisung aus.\n CREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL );   Die Tabelle MitarbeiterKopie wurde nun in der master Datenbank erstellt.\n   Datenbank mit USE auswählen Mit USE kannst du die Datenbank direkt in deiner Anweisung bestimmen. Du brauchst dann das Drop-Down Feld nicht mehr und kannst dir sicher sein, dass die richtige Datenbank ausgewählt ist.\n USE [MeineNeueDatenbank]; CREATE TABLE MitarbeiterKopie ( MitarbeiterID int IDENTITY (1,1) NOT NULL, Vorname nvarchar(50) NOT NULL, Nachname nvarchar(50) NOT NULL, Job nvarchar(50) NULL, Email nvarchar(50) NOT NULL );   Die Tabelle wurde nun in der MeineNeueDatenbank Datenbank erstellt.\n Lösche nun noch die Tabelle MitarbeiterKopie aus der master Datenbank.\n   "},{"uri":"https://training.andreaslongo.com/2-databases/flat-file-database/","title":"Flatfile Datenbank","tags":[],"description":"","content":"Schauen wir uns nun unsere erste konkrete Form einer Datenbank an — die Flatfile Datenbank.\n Eine Flatfile Datenbank ist eine einfache Datenstruktur, die meist ohne DBMS eingesetzt wird. Es werden Strukturen und Regeln für Daten festgelegt. Die Daten werden dann in einer einfachen Textdatei (Flatfile) gespeichert.\n Comma-separated values (CSV) Dateien sind beliebte Flatfile Datenbanken. Vielleicht hast du schon einmal eine solche .csv Datei gesehen.\n Struktur einer Flatfile Datenbank Eine Flatfile Datenbank besteht aus…​\n   einer einfachen Tabelle\n  mit Zeilen (Rows) und Spalten (Columns/Fields).\n  Zeilen speichern Datensätze zu einem einzelnen Objekt, zum Beispiel eine Person.\n  Spalten speichern die Attribute des Objektes, zum Beispiel die Adresse einer Person.\n   Flatfile Datei (CSV)\n Eine Flatfile Datenbank Datei beispiel.csv sieht zum Beispiel so aus:\n Name,Adresse Andreas,Hauptstraße 17 Wals-Siezenheim Salzburg 5071 Peter,Maria-Theresien-Straße 18 Innsbruck Tirol 6020 Michael,Hauptstraße 1 Linz Oberösterreich 4041 Wolfgang,Dorfplatz 1 Fuschl am See Salzburg 5330   Die Trennzeichen (Delimiter), hier ein Komma (,), markieren die einzelnen Spalten der Tabelle. Wir haben hier also eine Tabelle mit den Spalten Name und Adresse. Und wir haben vier Datensätze, die Daten von vier Personen, eingetragen.\n   Was ist ein Datensatz? Ein Datensatz ist eine konkrete Kombination von Attributwerten. Zum Beispiel ist die folgende Zeile Andreas,Hauptstraße 17 Wals-Siezenheim Salzburg 5071 aus unsere Tabelle ein Datensatz. Dieser Datensatz besteht aus den Werten der Attribute Name und Adresse.\n   "},{"uri":"https://training.andreaslongo.com/6-advanced-concepts/indexes/","title":"Indizes","tags":[],"description":"","content":"Ein Index oder mehrere Indizes beschleunigen das Suchen und Abfragen von Daten in deiner Datenbank.\n Was ist ein Index? Du kannst dir das als eine Art Inhaltsverzeichnis wie in einem Buch vorstellen. Wenn du eine bestimmte Information in einem Buch ohne Inhaltsverzeichnis finden möchtest, musst du jede Seite einzeln anschauen, bis du die gewünschte Information gefunden hast. Im Inhaltsverzeichnis kannst du dir einfach und schnell die passende Seitenzahl heraussuchen und öffnest die Seite direkt. Ähnlich ist das auch bei Datenbanken.\n Wenn du eine Spalte als Primary Key festlegst, wird vom Datenbanksystem automatisch ein Index für diese Spalte angelegt. Dies erlaubt es dem System, schnell und effizient Beziehungen zwischen Tabellen abzurufen.\n Wir können aber auch eigene Indizes anlegen. Das ist immer dann sinnvoll, wenn du Daten aus bestimmten Spalten oft abfragen, suchen oder filtern möchtest.\n   Einen eigenen Index anlegen Wir legen nun einen neuen Index für unsere Kunden Tabelle an.\n Öffne im Management Studio die Tabelle Kunden. Klicke mit der rechten Maustaste auf den Punkt Indexes und wähle New Index \u0026gt; Non-Clustered Index…​. Es öffnet sich ein neues Fenster in dem wir den Index anlegen können.\n Füge nun zuerst eine Index Key Spalte mit Add…​ hinzu. Wähle die Spalte Nachname aus und bestätige mit OK.\n Ändern den Namen des Indexes beim Punkt Index name auf: IX_Kunden_Nachname, damit du ihn später wiederfindest.\n Speichere deine Änderungen mit OK. Du siehst jetzt einen neuen Index unter Indexes.\n Der Index wird nun Suchen und Abfragen mit der Spalte Nachname erheblich beschleunigen. Unsere Beispieldatenbank ist noch sehr klein, du wirst hier also noch nicht direkt etwas von dieser Verbesserung merken. Aber, wenn deine Datenbank einmal größer wird und du darin hunderte, tausende oder mehr Kunden gespeichert hast, wirst du den Effekt deutlich spüren.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/sql-managment-studio/","title":"SQL Management Studio","tags":[],"description":"","content":"Das SQL Server Management Studio (SSMS) ist eine graphische Benurzerschnittstelle und dein Hauptwerkzeug, wenn du mit Microsoft SQL Server DBMS Instanzen arbeitest.\n Du kannst damit…​\n   Instanzen verwalten\n  Datenbanken anlegen und löschen\n  Daten abfragen, erfassen, ändern und löschen\n  …​\n   Die meisten Aktionen im Management Studio kannst du mit einem Rechtsklick auf ein Objekt ausführen. Objekte sind zum Beispiel Datenbanken, Benutzer, Tabellen, und mehr.\n Mit einer Instanz verbinden Wenn du das Management Studio öffnest, siehst du zunächst eine Anmeldemaske.\n   Unter Server type kannst du verschiedene Datenbank Services auswählen. Stelle hier Database Engine ein, um dich zur Hauptkomponente deiner Instanz zu verbinden.\n  Bei Server name trägst du den Netzwerknamen deiner Instanz ein zum Beispiel sqlinstance.westeurope.azurecontainer.io\n  Mit Authentication wählst du aus, wie du dich an deiner Instanz anmelden möchtest. Wähle hier SQL Server Authentication aus gib deinen Usernamen und das Password an.\n   Nun kannst du dich mit einem Klick auf Connect mit deiner Instanz verbinden.\n   Die Benutzeroberfläche Im Object Explorer siehst du nun deine Datenbank Instanz. Du siehst den Instanznamen, die DBMS Version und den Benutzernamen, mit dem du verbunden bist. In der Baumstruktur siehst du außerdem alle Objekte deiner Instanz, zum Beispiel die Datenbanken.\n Du kannst sämtliche Fenster innerhalb des Management Studios mit Klicken und Ziehen neu anordnen. Die Fenster lassen sich außerdem verstecken, anpinnen und schließen.\n Solltest du einmal versehentlich ein Fenster geschlossen oder verschoben haben, kannst du die Standardansicht wiederherstellen. Klicke dazu in der Menüleiste auf Window › Reset Window Layout.\n Den Object Explorer und einige andere Ansichten findest du außerdem im Menü View.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/alter/","title":"Der ALTER Befehl","tags":[],"description":"","content":"Mit ALTER kannst du existierende Objekte ändern.\n Eine Spalten in eine Tabelle einfügen Mit ALTER und ADD kannst du zum Beispiel eine neue Spalte in eine Tabellen einfügen.\n Öffne dazu ein neues Query.\n USE [MeineNeueDatenbank]; ALTER TABLE MitarbeiterKopie ADD Gehalt money;   Prüfe die Abfrage und führe sie aus.\n Du siehst nun die neue Spalte Gehalt in der Tabelle MitarbeiterKopie.\n   Mehrere Spalten einfügen Du kannst auch mehrere Spalten auf einmal hinzufügen.\n USE [MeineNeueDatenbank]; ALTER TABLE MitarbeiterKopie ADD ZweiterVorname nvarchar(50), BonusProzent int, LeistungsBewertung int ;   Prüfe die Abfrage und führe sie aus.\n Du hast nun drei weitere Spalten in die Tabelle eingefügt.\n   Spalten aus aus einer Tabellen entfernen Mit ALTER und DROP COLUMN kannst du Spalten aus Tabellen entfernen.\n Öffne ein neues Query.\n USE [MeineNeueDatenbank] ALTER TABLE MitarbeiterKopie DROP COLUMN Gehalt, ZweiterVorname, BonusProzent, Leistungsbewertung ;   Prüfe die Abfrage und führe sie aus.\n Du hast nun die Spalten aus deiner Tabelle entfernt.\n   "},{"uri":"https://training.andreaslongo.com/5-more-sql/update/","title":"Der UPDATE Befehl","tags":[],"description":"","content":"Mit UPDATE kannst du Datensätze in einer Tabelle ändern.\n Einen Datensatz ändern Wir möchten nun einen Datensatz in der Tabelle Mitarbeiter ändern.\n Öffne ein neues Query.\n Ändere nun die Email Adresse von Martin Hofer von mhofer@example.com auf itsupport@example.com\n USE [MeineNeueDatenbank]; UPDATE Mitarbeiter SET Email = \u0026#39;itsupport@example.com\u0026#39; WHERE Email = \u0026#39;mhofer@example.com\u0026#39;;   Beachte die WHERE Klausel. Ohne diesen Filter würdest du alle Email Adressen in deiner Tabelle auf itsupport@example.com ändern. Mit WHERE legst du den genauen Datensatz fest, den du ändern möchtest.\n Du hast nun die Email von Martin Hofer geändert. Lasse dir die Datensätzen mit SELECT anzeigen.\n   Mehrere Datensätze ändern Es kann ab und an nützlich sein, wenn du UPDATE Befehle ohne WHERE schreibst. Zum Beispiel dann, wenn du eine neue Spalte mit demselben Anfangswert befüllen möchtest.\n ALTER TABLE Mitgarbeiter ADD Teilzeit char(4); SELECT * FROM Mitarbeiter; UPDATE Mitarbeiter SET Teilzeit = \u0026#39;nein\u0026#39;;   Damit fügst du eine neue Spalte Teilzeit ein und befüllst diese für jeden Datensatz mit dem Anfangswert nein. Lasse dir nun die Datensätzen mit SELECT anzeigen.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/","title":"Die SQL Sprache","tags":[],"description":"","content":"Die Sprache der Datenbanken  SQL "},{"uri":"https://training.andreaslongo.com/3-database-server/import-database/","title":"Eine Datenbank hinzufügen","tags":[],"description":"","content":"Es ist nun an der Zeit, dass du deine erste Datenbank in die Instanz einbindest.\n Deine Instanz besteht aktuell nur aus den System Datenbanken. Die System Datenbanken enthalten Daten für die Instanz selbst. Dort sind Beispielsweise alle SQL User und Logins eingetragen.\n User Datenbanken dagegen sind alle selbst erstellten Datenbanken. Dort sind deine eigenen Daten oder die Daten von Anwendungen gespeichert. Eine Instanz kann mehrere User Datenbanken verwalten.\n User Datenbanken müssen entweder neu angelegt oder importiert werden.\n Eine Datenbank Importieren Die einfachste und gängigste Methode, eine Datenbank zu importieren ist, die Datenbank aus einer Backup Datei wiederherzustellen.\n Backup Dateien von Datenbanken haben normalerweise die Dateiendung .bak. Du findest das Backup einer Datenbank bei den Beispielen (example_database.bak).\n Diese möchten wir jetzt einbinden.\n  Klicke mit der rechten Maustaste auf Databases › Restore Databases…​\n  Beim Punkt Source, wähle Device aus\n  Klicke auf […​] und im nachfolgenden Fenster auf Add um eine Backup Datei auszuwählen\n  Bestätige nun alle Fenster mit OK um den Restore Prozess zu starten\n   Du siehst nun eine neue Datenbank im Object Explorer unter Databases. Das ist deine erste User Datenbank.\n   Die Datenbank öffnen Du kannst die Objekte deiner Datenbank im Object Explorer sehen und öffnen.\n   Die Tabellen der Datenbank findest du unter dem Punkt Tables.\n  Die Spalten einer Tabelle siehst du unterhalb der Tabelle bei Columns\n   Nun schauen wir uns die Datensätze einer Tabelle an.\n   Klicke dazu mit der rechten Maustaste auf eine Tabelle und wähle Select Top 1000 Rows aus.\n   Es erscheint ein neues Fenster. Im oberen Teil siehst du eine automatisch erstellte SQL Abfrage (Query). Im unteren Teil siehst du das Ergebnis deiner Abfrage. Du siehst außerdem noch eine Statuszeile mit dem aktuellen Stand der Abfrage: Query executed successfully\n Die Abfrage zeigt dir die ersten 1000 Datensätze der Tabelle an.\n   "},{"uri":"https://training.andreaslongo.com/2-databases/hierarchical-databases/","title":"Hierarchische Datenbank","tags":[],"description":"","content":"Du hast gesehen, dass eine Flatfile Datenbank aus einer Tabelle besteht.\n Eine hierarchische Datenbank besteht dagegen aus mehreren Tabellen, die in Beziehungen zueinander stehen.\n Die Beziehungen der einzelnen Tabellen sind in einer Hierarchie angeordnet. Das bedeutet, die Tabellen stehen in einer sogenannten Eltern \u0026gt; Kind (Parent \u0026gt; Child) Beziehung zueinander.\n Struktur einer hierarchischen Datenbank Eine hierarchische Datenbank besteht aus…​\n   mehreren Tabellen\n  die in Beziehung zueinander stehen.\n  Die Beziehungen sind immer Parent \u0026gt; Child Beziehungen.\n  Parent Tabellen können auf mehrere Child Tabellen verweisen.\n  Jede Child Tabelle hat nur eine Parent Tabelle.\n   Beispiele Hier siehst du einige Beispiele für hierarchischer Strukturen.\n Familienstammbaum\n graph TD Eltern --- Kind-1 --- Enkelkind Eltern --- Kind-2  Organigramm eines Unternehmens\n graph TD Geschäftsführer --- Abteilungsleiter-IT --- Teamleiter-IT --- Mitarbeiter-IT Geschäftsführer --- Abteilungsleiter-Verkauf --- Teamleiter-Verkauf --- Mitarbeiter-Verkauf  Ordnerstruktur eines Windows Dateisystems\n graph TD C --- Windows --- System32 Windows --- Temp C --- Users --- user1 --- Dokumente Users --- administrator --- Desktop C --- Programme --- SQL-Server Programme --- Microsoft-Excel  Hierarchische Datenbanken zeigen dir, wie Daten in einem Gesamtsystem eingeordnet sind. Du kannst erkennen, welche Daten vor und nach einem Datensatz angeordnet sind und mit welchen anderen Daten er in Beziehung steht.\n Du kannst die Beziehung zwischen einzelnen Tabellen sehen indem du, ausgehend von einer Tabelle, den Baum nach oben gehst, bis du einen gemeinsamen Verwandten erreichst. Nun folgst du ausgehend vom gemeinsamen Verwandten einen anderen Zweig des Baumes nach unten zu weiteren Tabellen.\n    Grenzen hierarchischer Strukturen Mit hierarchischen Strukturen lassen sich nur einfache Parent \u0026gt; Child Beziehungen abbilden. Du kannst nur das Darunter und das Darüber darstellen.\n Alles, was du nicht gut in einem Baumdiagramm abbilden kannst, passt nicht in eine hierarchische Datenbank.\n   "},{"uri":"https://training.andreaslongo.com/6-advanced-concepts/naming-conventions/","title":"Namenskonventionen","tags":[],"description":"","content":"Bevor du neue Datenbanken erstellst, ist es wichtig, dass du dir zunächst ein paar Gedanken über sinnvolle Namen für deine Objekte (Datenbank, Tabellen, Spalten, …​) machst. Du erleichterst dir damit das Schreiben von SQL Abfragen und die gesamte Arbeit mit Datenbankobjekten.\n Beispiele Hier sind einige Beispiele, die dir dabei als Orientierung dienen sollen:\n   Nutze keine Leerzeichen und keine Sonderzeichen. Beispiel: EmailAdresse, nicht E-Mail Adresse\n  Nutze PascalCase für die Namen deiner Objekte und halte dich konsequent daran. Beispiel: KundenNummer oder kundenNummer, nicht kundennummer oder KUNDENNUMMER\n  Nutze entweder Plural oder Singular für deine Namen, aber nicht beides zusammen. Beispiel: Entweder Tabelle Produkte, Kunden oder Tabelle Produkt, Kunde, aber nicht Tabelle Produkt, Kunden.\n  Nutze keine reservierte Namen wie zum Beispiel SQL-Befehle. Beispiel: Nenne deine Tabelle nicht Select und deine Spalte nicht Create\n  Namen von Tabellen sollten ihren Inhalt widerspiegeln, aussagekräftig und einzigartig in der Datenbank sein Beispiel: Nenne deine Tabelle Mitarbeiter nicht Personen\n     Die Goldene Regel Für welche Namen du dich auch immer entscheidest:\n Entscheide dich einmal für eine Konvention und bleibe dann konsequent dabei.\n Das erleichter nicht nur dir selbst die Arbeit. Du hilfst damit auch anderen.\n   "},{"uri":"https://training.andreaslongo.com/5-more-sql/delete/","title":"Der DELETE Befehl","tags":[],"description":"","content":"Mit DELETE kannst du Datensätze aus einer Tabelle löschen.\n Du hast bereits den Befehl TRUNCATE kennengelernt, mit dem du alle Datensätze aus einer Tabelle entfernen kannst.\n Mit dem DELETE Befehl kannst du einzelne Datensätze aus einer Tabelle löschen. Der Unterschied zwischen dem DELETE und dem TRUNCATE Befehl ist, dass du mit DELETE den WHERE Filter nutzen kannst um genau zu bestimmen, welche Datensätze gelöscht werden sollen.\n Datensätze löschen Öffne ein neues Query.\n Entferne zuerst die gesamte Tabelle KundenKopie und erstelle sie erneut aus der Tabelle Kunden\n USE [MeineNeueDatenbank]; DROP TABLE KundenKopie; SELECT * INTO KundenKopie FROM Kunden;   Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\n SELECT * FROM KundenKopie   Lösche den Datensatz des Kunden mit der ID 5 aus der Tabelle\n DELETE FROM KundenKopie WHERE KundenID = 5   Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\n Lösche nun alle Kunden mit einer ID größer als 6.\n DELETE FROM KundenKopie WHERE KundenID \u0026gt; 6   Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/drop/","title":"Der DROP Befehl","tags":[],"description":"","content":"Mit DROP kannst du existierende Objekte löschen.\n Du kannst damit nicht nur Spalten aus Tabellen entfernen, sondern auch ganze Tabellen oder sogar ganze Datenbanken löschen. Sei also vorsichtig mit diesem Befehl.\n Eine Tabelle entfernen Öffne ein neues Query.\n USE [MeineNeueDatenbank] DROP TABLE MitarbeiterKopie;   Prüfe die Abfrage und führe sie aus.\n Du hast nun die Tabelle MitarbeiterKopie aus der Datenbank entfernt.\n Du kannst Objekte nur entfernen, wenn das Objekt keine Abhängigkeiten zu anderen Objekten mehr hat. Wenn du ein Objekt einmal nicht entfernen kannst, bekommst du eine Fehlermeldung mit dem genauen Grund dafür. Schaue dir dann die Ursache an und behebe das Problem.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/create-database/","title":"Eine neue Datenbank erstellen","tags":[],"description":"","content":"Nachdem wir eine bestehende Datenbank in die Instanz importier haben, wollen wir nun eine brandneue eigene Datenbank anlegen.\n Eine neue Datenbank erstellen Klicke im Object Explorer mit der rechten Maustaste auf Databases › New Database…​.\n  Gib der neuen Datenbank einen Namen mit dem Feld Database name\n  Erstelle die Datenbank mit einem Klick auf OK\n   Wenn du eine Datenbank anlegst werden typischerweise zwei neue Dateien auf deiner Festplatte angelegt.\n   Eine Datei enthält die eigentlichen Daten deiner Datenbank (File Type: ROWS Data).\n  Die andere Datei enthält die Transaktions-Logs der Datenbank (File Type: LOG).\n   Was Transaktionen sind, werden wir später noch erfahren.\n   "},{"uri":"https://training.andreaslongo.com/5-more-sql/","title":"Mehr SQL","tags":[],"description":"","content":"Die Fortsetzung  SQL "},{"uri":"https://training.andreaslongo.com/2-databases/relational-databases/","title":"Relationale Datenbank","tags":[],"description":"","content":"Die relationale Datenbank ist das am häufigsten verwendete Modell zur Datenspeicherung.\n Eine relationale Datenbank vereint die Konzepte der Flatfile Datenbank mit Konzepten der hierarchischen Datenbank.\n Struktur einer relationalen Datenbank Eine relationale Datenbank besteht aus…​\n   mehreren Tabellen,\n  die in Beziehungen zueinander stehen,\n  hat jedoch keine Einschränkungen der Beziehungen.\n   Damit können wir nun komplexere Beziehungen zwischen Daten abbilden.\n   Was ist eine Relation? Bei relationalen Datenbanken nutzen wir den Begriff Relation allgemein als Synonym für Tabelle.\n Eine Relation oder Datenbankrelation beschreibt nicht die Beziehungen der Tabellen untereinander. Das wird häufig verwechselt und ist auch in der Fachliteratur nicht immer eindeutig dargestellt.\n Falls du also einmal etwas über Relationen ließt, achte genau darauf, was der Autor meint.\n   Wie sieht eine relationale Datenbank aus?   Die Daten sind auf mehrere themenspezifische Tabellen aufgeteilt\n  Jede Tabelle beschreibt eine Gruppe von \u0026#34;Dingen\u0026#34;\n  Jeder Datensatz ist eindeutig durch einen Schlüssel (Key) identifizierbar\n   Anstatt eine große Tabelle mit sehr vielen Spalten zu erstellen, werden die Daten auf mehrere Tabellen mit wenigen Spalten aufgeteilt. Mit Hilfe sogenannter Schlüssel (Keys) lassen sich Datensätze eindeutig identifizieren und Beziehungen zwischen einzelnen Tabellen und deren Datensätzen herstellen.\n   Schlüssel Schlüssel sind Attributwerte, die genutzt werden um Datensätze voneinander unterscheiden beziehungsweise diese eindeutig identifizieren zu können. Ein Schlüssel ist also eine Spalte oder eine Gruppe von Spalten in einer Tabelle, die so ausgewählt wird, dass jeder Datensatz, über die Werte dieser Gruppe einmalig ist.\n Ein Beispiel Nehmen wir als Beispiel eine Tabelle Produkte.\n Table 1. Produkte     Artikel Farbe     T-Shirt\n Rot\n   T-Shirt\n Grün\n   Pullover\n Rot\n   Pullover\n Grün\n    Du siehst, dass sich die Datensätze weder über die Spalte Artikel noch über die Spalte Farbe eindeutig identifizieren lassen. Es gibt nun zwei einfache Möglichkeiten, wie du die eindeutige Identifizierbarkeit erreichen kannst.\n  Durch eine Kombination der beiden Spalten. Es gibt nur einen roten Pullover und nur ein rotes T-Shirt. Die Gruppe der beiden Spalten Artikel und Farbe ist damit dein Schlüssel. Man nennt dies auch einen kombinierten Schlüssel oder Verbundschlüssel\n  Indem du eine neue Spalte Artikel ID einfügst und dafür sorgst, dass die IDs eindeutig sind. Die Spalte Artikel ID ist damit dein Schlüssel.\nTable 2. Produkte     Artikel ID Artikel Farbe     1\n T-Shirt\n Rot\n   2\n T-Shirt\n Grün\n   3\n Pullover\n Rot\n   4\n Pullover\n Grün\n       Es kann auch sein, dass eine Spalte schon von natur aus immer eindeutige Werte beinhaltet. Zum Beispiel ist eine Sozialversicherungsnummer immer einmalig. Es gibt keine zweite Nummer mit demselben Wert.\n Hier einige weitere Beispiele von Attributen, deren Werte direkt als Schlüssel genutzt werden können.\n   Kontonummer bei einer Bank\n  ISBN-Nummer eines Buches\n  Artikelnummer von Produkten\n   Jeder dieser Attribute repräsentiert eindeutig identifizierbare Daten.\n Ein Konto gehört zum Beispiel genau einer Person. Es gibt keine zweite Person mit derselben Kontonummer. Ein Buch hat genau eine ISBN-Nummer. Es gibt kein zweites Buch mit derselben ISBN-Nummer.\n    Beispiel einer relationale Datenbank Nehmen wir als Beispiel eine Tabelle (Relation), die unsere Kunden (Objekte) darstellt.\n In den Spalten erfasst du Name und Adresse zusammen mit allen weiteren Daten, die du benötigst (Attribute). Außerdem fügst du du noch eine ID Spalte ein, mit der du jeden Kunden eindeutig identifizieren kannst (Schlüssel).\n Table 3. Kunden     Kunde ID Name Adresse …​     1\n Andreas\n Hauptstraße 17 Wals-Siezenheim Salzburg 5071\n …​\n   2\n Peter\n Maria-Theresien-Straße 18 Innsbruck Tirol 6020\n …​\n   3\n Michael\n Hauptstraße 1 Linz Oberösterreich 4041\n …​\n   4\n Wolfgang\n Dorfplatz 1 Fuschl am See Salzburg 5330\n …​\n    Nun legst du du noch eine weitere Tabelle an, die Produkte beinhaltet. Jedes Produkt ist ein eigener Datensatz und hat auch hier eine ID als Schlüssel.\n Table 4. Produkte     Produkt ID Produkt Name Farbe …​     P01\n T-Shirt\n Rot\n …​\n   P02\n T-Shirt\n Grün\n …​\n   P03\n T-Shirt\n Blau\n …​\n   P04\n Pullover\n Schwarz\n …​\n   P05\n Pullover\n Grau\n …​\n    Jetzt möchtest du gerne einen Bestellvorgang beschreiben. Ein Kunde kauft zum Beispiel ein Produkt und du möchtest die Daten später auf einer Rechnung ausgeben.\n Du legst nun eine weitere Tabelle an. Dort verknüpfst du die Datensätze aus den anderen Tabellen mit hilfe der Schlüssel miteinander.\n Table 5. Bestellungen     Bestellung ID Produkt ID Kunde ID …​     B01\n P03\n 1\n …​\n   B02\n P04\n 2\n …​\n   B03\n P02\n 2\n …​\n   B04\n P05\n 4\n …​\n   B05\n P05\n 3\n …​\n    Kannst du herausfinden…​\n   wer die Rechnung für Bestellung 2 bekommt?\n  wie oft der graue Pullover bestellt worden ist?\n  welches Produkt Peter bei dir gekauft hat?\n   Wenn du deine Daten auf diese Weise in getrennte Tabellen aufteilst, kannst du die Datensätze später flexibel und einfach kombinieren. Deine Daten lassen sich so auf fast jede beliebige Art neu darstellen.\n Du kannst so Fragen beantworten, die du heute noch nicht kennst. Zum Beispiel, in welchem Bundesland werden die meisten grauen Pullover gekauft?\n   "},{"uri":"https://training.andreaslongo.com/6-advanced-concepts/schemas/","title":"Schemas","tags":[],"description":"","content":"Dir ist vielleicht aufgefallen, dass jedesmal wenn wir eine Tabelle erstellt haben die Buchstaben dbo vor dem Tabellennamen automatisch vom Datenbanksystem eingetragen wurden.\n dbo steht für Datenbankbesitzer (Database Owner). Wenn wir Objekte erstellen, markiert das Datenbanksystem dieses Objekt mit der Identifikation der Person, die dieses Objekt besitzt.\n Diese Markierung wird Schema genannt. Schemas werden genutzt um Tabellen in logische Gruppen einzuteilen.\n Ein Beispiel In einer Firma könnte zum Beispiel die Abteilung \u0026#34;Verkauf\u0026#34; einige Kunden haben, über die sie Daten erfassen und die Abteilung \u0026#34;Werbung\u0026#34; erfasst ihre eigenen Kunden.\n Schemas machen es einfach festzulegen und zu erkennen, welche Tabellen zu welcher Abteilung gehören.\n   Eigene Schemas erstellen Wir können eigene Schemas erstellen, um unsere Tabellen zu organisieren.\n Öffne im Management Studio unter deiner Datenbank den Punkt Security. Klicke mit der rechten Maustaste auf Schemas und wähle New Schema…​\n Gib dem Schema einen Namen: verkauf. Lege den Besitzer für dieses Schema mit dem Punkt Schema owner fest: dbo\n Bestätige deine Eingaben mit OK Unter dem Punkt Schemas kannst du nun dein neues Schema sehen.\n Erstelle nun eine neue Tabelle mit einer Spalte KundenID. Im Editor der Tabelle, gehe im Menü auf View › Properties Window oder drücke die Taste F4. Im Properties Fenster unter Schema kannst du nun dein neues Schema eintragen, um die Tabelle mit diesem Schema zu verknüpfen.\n Speichere deine Einstellungen und die Tabelle unter dem Namen Kunden. Du siehst nun eine neue Tabelle Kunden unter dem neuen Schema: verkauf.Kunden\n Mit der Hilfe von Schemas kannst du so deine Daten und Tabellen besser organisieren.\n   "},{"uri":"https://training.andreaslongo.com/5-more-sql/merge/","title":"Der MERGE Befehl","tags":[],"description":"","content":"Mit MERGE kannst du zwei Tabellen miteinander vergleichen und die Unterschiede in den Datensätzen entweder ergänzen, löschen oder überschreiben.\n Der MERGE Befehl ist etwas komplizierter als die übrigen Befehle, die du bisher kennengelernt hast.\n Änderungsdaten erstellen Öffne ein neues Query.\n Erstelle eine neue Tabelle KundenUpdates.\n USE [MeineNeueDatenbank]; CREATE TABLE KundenUpdates ( KundenID int NOT NULL, Vorname nvarchar(50), Nachname nvarchar(50), Telefonnummer nchar(30), Adresse nvarchar(255), Stadt nvarchar(50), Bundesland nchar(50), Postleitzahl nchar(4) );   Füge der Tabelle einige Datensätzen als Beispiele hinzu.\n INSERT INTO KundenUpdates (KundenID, Adresse, Stadt, Bundesland, Postleitzahl) VALUES (1, \u0026#39;Hauptstraße 17\u0026#39;, \u0026#39;Wals-Siezenheim\u0026#39;, \u0026#39;Salzburg\u0026#39;, \u0026#39;5071\u0026#39;); INSERT INTO KundenUpdates (KundenID, Nachname) VALUES (4, \u0026#39;Pichler\u0026#39;); INSERT INTO KundenUpdates (KundenID, Telefonnummer) VALUES (3, \u0026#39;(+43) 664 555 555\u0026#39;); INSERT INTO KundenUpdates VALUES (11, \u0026#39;Peter\u0026#39;, \u0026#39;Scherer\u0026#39;, \u0026#39;(+43) 664 777 777\u0026#39;), \u0026#39;Maria-Theresien-Straße 18\u0026#39;, \u0026#39;Innsbruck\u0026#39;, \u0026#39;Tirol\u0026#39;, \u0026#39;6020\u0026#39;)   Lasse dir die Datensätze der Tabelle mit SELECT anzeigen.\n Was du hier siehst sind gesammelte Änderungen an Datensätzen. Du siehst zum Beispiel der Kunde mit der ID 4 seinen Nachnamen auf Pichler ändern möchte. Du siehst auch, dass Kunde Nr 3 seine Telefonnummer ändert, usw.\n   Wie funktioniert der MERGE Befehl? Wir möchten nun diese Änderungen auf unsere bestehende Tabelle Kunden anwenden. Dazu benutzt du den MERGE Befehl. Schaue dir das folgende Beispiel und die Kommentare dazu weiter unten genau an.\n MERGE Kunden (1) USING KundenUpdates (2) ON Kunden.KundenID = KundenUpdates.KundenID (3) WHEN MACTHED AND (4) KundenUpdates.Vorname IS NOT NULL THEN (5) UPDATE SET Kunden.Vorname = KundenUpdates.Vorname; (6)     Der MERGE Befehl muss zuerst wissen, wohin die änderungen gespeichert werden sollen\n  Wir möchten die Tabelle Kunden mit der Tabelle KundenUpdates vergleichen\n  Wir geben an, über welche Spalten die beiden Tabellen verknüpft werden sollen\n  Wenn die IDs der beiden Datensätze gleich sind und (AND)\n  Wenn der Vorname aus der Tabelle KundenUpdates nicht NULL ist dann (THEN)\n  Update den Vornamen in der Tabelle Kunden aus der Tabelle KundenUpdates\n   Wir gehen also zur Tabelle Kunden, holen uns Datensätze aus der Tabelle KundenUpdates und für jeden Kunden, bei dem die ID Nummer übereinstimmt und dessen Vorname nicht leer ist, ändern wir den Vornamen.\n   Änderungsdaten abgleichen Wir tun nun dasselbe noch für die übrigen Spalten.\n   Nachname\n  Telefonnummer\n  Adresse\n  Stadt\n  Bundesland\n  Postleitzahl\n   Und hier ist nun die (fast) vollständige MERGE Anweisung.\n MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Vorname IS NOT NULL THEN UPDATE SET Kunden.Vorname = KundenUpdates.Vorname; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Nachname IS NOT NULL THEN UPDATE SET Kunden.Nachname = KundenUpdates.Nachname; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Telefonnummer IS NOT NULL THEN UPDATE SET Kunden.Telefonnummer = KundenUpdates.Telefonnummer; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Adresse IS NOT NULL THEN UPDATE SET Kunden.Adresse = KundenUpdates.Adresse; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Stadt IS NOT NULL THEN UPDATE SET Kunden.Stadt = KundenUpdates.Stadt; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Bundesland IS NOT NULL THEN UPDATE SET Kunden.Bundesland = KundenUpdates.Bundesland; MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN MACTHED AND KundenUpdates.Postleitzahl IS NOT NULL THEN UPDATE SET Kunden.Postleitzahl = KundenUpdates.Postleitzahl;   Wenn keine Übereinstimmung in den Datensätze in den Tabellen gefunden wurde, also wenn ein Datensatz in der Tabelle KundenUpdates noch nicht in der Tabelle Kunden existiert, dann füge einen kompletten neuen Datensatz in die Kunden Tabelle ein.\n MERGE Kunden USING KundenUpdates ON Kunden.KundenID = KundenUpdates.KundenID WHEN NOT MATCHED BY TARGET THEN INSERT (Vorname, Nachname, Telefonnummer, Adresse, Stadt, Bundesland, Postleitzahl) VALUES ( KundenUpdates.Vorname, KundenUpdates.Nachname, KundenUpdates.Telefonnummer, KundenUpdates.Adresse, KundenUpdates.Stadt, KundenUpdates.Bundesland, KundenUpdates.Postleitzahl )   Wenn du nun all diese Anweisungen ausführst, wird deine Kunden Tabelle mit den Änderungen aus der KundenUpdates Tabelle aktualisiert. Lasse dir die Änderungen mit SELECT anzeigen.\n Das war nun eine ganze Menge Code für diese Aufgabe. Aber bedenke, du musst diesen Code nur einmal schreiben und speichern. Wann immer du einen solchen Abgleich machen möchtest, führst du einfach erneut deine gespeicherte Abfrage aus.\n   "},{"uri":"https://training.andreaslongo.com/4-sql-language/truncate/","title":"Der TRUNCATE Befehl","tags":[],"description":"","content":"Mit TRUNCATE kannst alle Datensätze aus einer Tabelle löschen.\n Die Datensätze werden gelöscht, aber die Spalten und andere Einstellungen bleiben bestehen. Das kann nützlich sein, wenn du zum Beispiel eine leere Tabelle brauchst, ohne diese neu anlegen zu müssen.\n Datensätze löschen Öffne ein neues Query.\n USE [MeineNeueDatenbank] SELECT * INTO KundenKopie FROM Kunden; USE [MeineNeueDatenbank] SELECT * FROM KundenKopie; USE [MeineNeueDatenbank] TRUNCATE TABLE KundenKopie; USE [MeineNeueDatenbank] SELECT * FROM KundenKopie;   Führe die Code Blöcke nacheinander aus, indem du sie einzeln markierst und dann Execute klickst.\n Nach der TRUNCATE Anweisung sind alle Datensätze aus der Tabelle KundenKopie gelöscht.\n Entferne nun noch die Tabelle KundenKopie aus der Datenbank.\n USE [MeineNeueDatenbank] DROP TABLE KundenKopie;     "},{"uri":"https://training.andreaslongo.com/3-database-server/create-table/","title":"Eine Tabelle erstellen","tags":[],"description":"","content":"Deine neue Datenbank enthält noch keine Daten. Doch bevor du Daten speichern kannst, musst du zuvor Strukturen für deine Daten schaffen.\n Eine Tabelle anlegen Wir erstellen also zuerst eine Tabelle.\n Klicke im Object Explorer, unter der neuen Datenbank, mit der rechten Maustaste auf Tables › Table…​\n Eine Spalte hinzufügen Im folgenden Fenster legst du nun die Spalten für deine Tabelle fest. Jede Spalte bekommt einen Namen und einen Datentyp.\n Definiere nun eine neue Spalte ProduktID:\n     Column Name Data Type     ProduktID\n int\n     Den Schlüssel festlegen Die Spalte ProduktID soll dein Primärschlüssel (Primary Key) für diese Tabelle sein. Zur Erinnerung, der Schlüssel dient dazu, jeden Datensatz in der Tabelle eindeutig identifizieren zu können.\n Klicke mit der rechten Maustaste auf ProduktID und wähle Set Primary Key aus. Die Spalte ist nun als Schlüssel hinterlegt.\n  Eine Regel für die Spalte festlegen Nun möchten wir eine Regel für die neue Spalte festlegen.\n Suche dazu im unteren Teil des Fensters (Column Properties) den Eintrag Identity Specification und ändere den Wert von (is identity) auf Yes.\n Diese Regel ist speziell für ID Spalten (Identity) gedacht. Damit musst du deine ID Spalte nicht händisch pflegen. Für jeden neuen Datensatz, den du in der Tabelle speicherst, wird automatisch eine neue ID Nummer in der Spalte ProduktID erzeugt.\n  Weitere Spalten hinzufügen Füge nun folgende weitere Spalten hinzu.\n     Column Name Data Type AllowNulls     ProduktID\n int\n    ArtikelName\n nvarchar(100)\n    Zielgruppe\n char(1)\n x\n   Preis\n money\n     Speichere die Tabelle unter dem Namen Produkte.\n Du kannst deine neue Tabelle nun im Object Explorer sehen. Falls nicht, klicke mit der rechten Maustaste auf Tables und dann auf Refresh.\n Refresh kann bei vielen Aktionen notwendig sein. Wundere dich also nicht, falls du Objekte nicht sofort siehst. Klicke einfach auf Refresh oder nutze die F5 Taste.\n    Einen Datensatz in die Tabelle eintragen Klicke mit der rechten Maustaste auf die neue Tabelle Produkte und wähle Edit Top 200 Rows. Du kannst nun Daten in die Tabelle eintragen.\n In die Spalte ProduktID kannst du nicht selbst etwas eintragen. Unsere vorher eingestellte Regel sorgt dafür, dass die Spalte automatisch befüllt wird.\n Trage nun drei Datensatz für neue Produkte in deine Tabelle ein.\n     ProductID ArtikelName Zielgruppe Preis      T-Shirt\n M\n 25\n    Hose\n W\n 40\n    Pullover\n  35\n      "},{"uri":"https://training.andreaslongo.com/6-advanced-concepts/","title":"Fortgeschrittene Konzepte","tags":[],"description":"","content":"Fortgeschrittene Konzepte  Ein Einblick "},{"uri":"https://training.andreaslongo.com/2-databases/normalization/","title":"Normalisierung","tags":[],"description":"","content":"Die Normalisierung von Daten ist eine wichtige Grundlage zur Datenspeicherung.\n Unter Normalisierung versteht man das Aufteilen von Attributen (Spalten) in ihre kleinstmöglichen Teile. Die Abfragen von Datensätzen wird dadurch erleichtert oder oft auch damit überhaupt erst ermöglicht.\n Ein Beispiel Angenommen du möchtest die Adressen von verschiedenen Kunden in einer Flatfile Datenbank speichern.\n Die Adresse eines Kunden schaut zum Beispiel so aus: Andreas Hauptstraße 17 5071 Wals-Siezenheim Salzburg     Entwurf Zuerst überlegst du dir eine sinnvolle Struktur für deine Daten.\n Eine Flatfile Datenbank besteht aus einer Tabelle. Das ist schon der erste Teil deiner Struktur.\n Dein Objekt, ist in diesem Beispiel ein Kunde. Jede Zeile deiner Tabelle soll also einen einzelnen Kunden darstellen. Das sind deine Datensätze.\n Die Attribute des Objekts sind in diesem Fall der Name und die Adresse eines Kunden. Deine Tabelle braucht also zwei Spalten für die Attribute Name und Adresse.\n Dein erster Entwurf der Tabelle schaut so aus:\n Table 1. Entwurf     Name Adresse     Andreas\n Hauptstraße 17 Wals-Siezenheim Salzburg 5071\n   Peter\n Maria-Theresien-Straße 18 Innsbruck Tirol 6020\n   Michael\n Hauptstraße 1 Linz Oberösterreich 4041\n   Wolfgang\n Dorfplatz 1 Fuschl am See Salzburg 5330\n    Nun überlegst du dir, welche Informationen aus den Daten für dich nützlich sind.\n Es wäre zum Beispiel hilfreich, wenn du alle Kunden sehen könntest, die im selben Bundesland leben. Du möchtest also deine Datensätze (die Kunden) nach Bundesland sortieren oder filtern.\n Dir wird auffallen, dass dies nicht ganz einfach ist. Wie sollst du das Bundesland aus der Spalte Adresse herausbekommen?\n   Normalisierung Hier kommt nun die Normalisierung ins Spiel.\n Wenn du deine Attribute in weitere Spalten zerlegst, diese also normalisierst, wird das Sortieren nach Bundesland auf einmal sehr leicht.\n Du zerlegst also die Spalte Adresse in kleinere Bestandteile und bekommst so die neuen Spalten Straße, Stadt, Bundesland und Postleitzahl.\n Table 2. Normalisierung     Name Straße Stadt Bundesland Postleitzahl     Andreas\n Hauptstraße 17\n Wals-Siezenheim\n Salzburg\n 5071\n   Peter\n Maria-Theresien-Straße 18\n Innsbruck\n Tirol\n 6020\n   Michael\n Hauptstraße 1\n Linz\n Oberösterreich\n 4041\n   Wolfgang\n Dorfplatz 1\n Fuschl am See\n Salzburg\n 5330\n    Durch die Normalisierung ist es nun sehr einfach, die Datensätze nach verschiedenen Kriterien zu sortieren und zu filtern.\n   Du möchtest nur Kunden aus dem Bundesland Salzburg sehen? Kein Problem, du filterst die Datensätze einfach über die Spalte Bundesland.\n  Du möchtest außerdem, dass Kunden mit der niedrigsten Postleitzahl immmer ganz oben in der Tabelle stehen? Auch das ist kein Probem. Du sortierst die Datensätze einfach mit der Spalte Postleitzahl\n   Table 3. Gefiltert nach Bundesland Salzburg     Name Straße Stadt Bundesland Postleitzahl     Andreas\n Hauptstraße 17\n Wals-Siezenheim\n Salzburg\n 5071\n   Wolfgang\n Dorfplatz 1\n Fuschl am See\n Salzburg\n 5330\n    Vermutlich hattest du schon oft unbewusst mit Normalisierung zu tun. Sie ist unter Anderem der Grund dafür, dass du zum Beispiel bei Online Bestellungen deine Adresse immer in getrennten Feldern eingeben musst.\n   Speichern Nun speicherst du deine Daten noch in einer Flatfile Datenbank im CSV Format: beispiel_normalisiert.csv\n Name,Straße,Stadt,Bundesland,Postleitzahl Andreas,Hauptstraße 17,Wals-Siezenheim,Salzburg,5071 Peter,Maria-Theresien-Straße 18,Innsbruck,Tirol,6020 Michael,Hauptstraße 1,Linz,Oberösterreich,4041 Wolfgang,Dorfplatz 1,Fuschl am See,Salzburg,5330     "},{"uri":"https://training.andreaslongo.com/4-sql-language/challenge/","title":"Aufgabe","tags":[],"description":"","content":"Erstelle eine Tabelle mit SQL Anweisungen Nutze für die folgenden Aufgaben nur SQL-Befehle.\n Öffne ein neues Query und kopiere die Aufgaben in den Editor. Wenn du fertig bist, speichere deine Lösung.\n -- Verbinde dich zu deiner Datenbank aus der ersten Aufgabe. -- Entferne die Tabelle aus deiner Datenbank. -- Erstelle die gleiche Tabelle erneut. -- Füge eine neue Spalte in die Tabelle ein.     "},{"uri":"https://training.andreaslongo.com/5-more-sql/challenge/","title":"Aufgabe","tags":[],"description":"","content":"Nutze SQL Anweisungen für die Arbeit mit Datensätzen Nutze für die folgenden Aufgaben nur SQL-Befehle.\n Öffne ein neues Query und kopiere die Aufgaben in den Editor. Wenn du fertig bist, speichere deine Lösung.\n -- Füge drei neue Datensätze in die Tabelle deiner Datenbank aus der ersten Aufgabe ein. -- Lösche einen der neuen Datensätze. -- Frage einige Daten mit dem `SELECT` Befehl ab.     "},{"uri":"https://training.andreaslongo.com/2-databases/calculation/","title":"Berechnung von Werten","tags":[],"description":"","content":"Eine weitere wichtige Grundregel zur Speicherung von Daten ist die Regel zur Berechnung von Werten.\n Die Grundregel besagt, dass wir keine Daten speichern, die aus anderen Daten abgeleitet oder berechnet werden können. Wenn du also Werte ableiten oder berechnen kannst, speichere sie nicht in der Datenbank, sondern lasse sie vom Computer generieren.\n Beispiel In einer Excel Tabelle würdest du zum Beispiel die Funktion sum() nutzen und nicht jede Summe händisch in die Tabelle eintragen. Wenn sich nun ein Wert ändert, wird deine Summe automatisch aktualisiert.\n Table 1. Excel      A B     1\n 25\n    2\n 60\n    3\n 35\n    4\n 14\n    5\n =sum(A1:A4)\n       Welche Werte berechnen wir und welche können wir ableiten? Auf Datenbanken bezogen bedeutet das, dass du zum Beispiel den Endbetrag, die Summe einer Rechnung nicht als Wert in eine Tabellenspalte einträgst. Du lässt dir diesen Wert berechnen: Rechnungssumme = Produkt Preis * Bestellte Menge\n Wir berechnen nicht nur Zahlen, sondern auch andere Werte So musst du zum Beispiel nicht das Alter einer Person als Wert speichern und pflegen. Stattdessen berechnest du einfach das Alter: Alter = Datum Heute - Geburtstag der Person\n  Text Daten dagegen können wir ableiten Benötigst du zum Beispiel die Initialen einer Person, nimmst du einfach den ersten Buchstaben aus der Spalte Vornamen und kombinierst diesen mit dem ersten Buchstaben aus der Spalte Nachnamen.\n     Vorname Nachname     Andreas\n Longo\n    Initialen: AL\n Datenbanksysteme unterstützen dich dabei und bieten dir sehr viele Möglichkeiten zum Berechnen und Ableiten von Werten. Es gibt eine SUM() Funktion, ähnlich wie in in Excel, und noch viele Weitere.\n    "},{"uri":"https://training.andreaslongo.com/7-end/","title":"Ende","tags":[],"description":"","content":"Das wars, du hast es geschafft  Ende "},{"uri":"https://training.andreaslongo.com/3-database-server/modify-table/","title":"Tabelle anpassen","tags":[],"description":"","content":"Du hast nun eine neue Tabelle in deiner Datenbank angelegt und diese mit Daten gefüllt.\n Jetzt möchtest du eine neue Spalte in diese Tabelle einfügen. Du änderst damit das Design der Tabelle.\n Designänderungen sind mit gewissen Gefahren verbunden, sofern die Datenbank schon von anderen Benutzern oder Systemen verwendet wird. Du solltest dabei also vorsichtig sein.\n Unsere Datenbank befindet sich jedoch noch im Aufbau. Du kannst also beliebig Änderungen machen.\n Das Design einer Tabelle anpassen Klicke mit der rechten Maustaste auf die Tabelle Produkte und wähle Design…​ Du siehst nun eine ähnliche Ansicht wie beim Anlegen einer neuen Tabelle.\n Eine neue Spalte einfügen Füge jetzt eine neue Spalte Beschreibung mit dem DatenType nvarchar(100) hinzu. Schließe die Ansicht wieder und speichere deine Änderungen.\n     Column Name Data Type     Beschreibung\n nvarchar(100)\n    Schau dir nun die Datensätze deiner Tabelle an (Select Top 1000 Rows).\n     ProductID ArtikelName Zielgruppe Preis Beschreibung     1\n Pullover\n U\n 35\n NULL\n     Die Reihenfolge der Spalten ändern Nun möchtest du die Spalten in deiner Tabelle in eine anderen Reihenfolge bringen. Du möchtest Beschreibung zwischen Artikelname und Zielgruppe stehen haben.\n   Öffne dazu wieder den Designer deiner Tabelle.\n  Klicke auf das Pfeilsymbol vor Beschreibung, halte die Maustaste gedrückt und ziehe den Eintrag zwischen Artikelname und Zielgruppe.\n  Schließe den Designer und speichere deine Änderungen.\n   Du bekommst eine Fehlermeldung.\n Das Datenbanksystem muss für diese Änderung die gesamte Tabelle löschen und neu anlegen um die Spalten zu sortieren. Einen solchen Vorgang musst du explizit erlauben, denn das kann gefährlich sein für die Nutzer der Datenbank.\n Um diesen Vorgang zu erlauben, deaktiviere die folgende Einstellung im Management Studio: Tools › Options…​ › Designers › Tables and Database Designers › Prevent saving changes that requires table re-creation\n Du kannst nun die Spalten im Designer neu anordnen. Diesmal bekommst du keine Fehlermeldung beim speichern und deine Änderungen werden übernommen. Deine Tabelle wird dabei neu angelegt, die Datensätze bleiben jedoch erhalten.\n    "},{"uri":"https://training.andreaslongo.com/3-database-server/drop-database/","title":"Datenbank löschen","tags":[],"description":"","content":"Um eine Datenbank zu löschen, klicke mit der Rechten Maustaste auf den Namen der Datenbank und wähle Delete aus. Im folgenden Fenster solltest du noch Close existing connections aktivieren.\n Eine Datenbank kann erst gelöscht werden, wenn keine Verbindungen mehr auf die Datenbank bestehen. Das können zum Beispiel andere Benutzer sein, die die Datenbank verwenden.\n "},{"uri":"https://training.andreaslongo.com/2-databases/datatypes-and-rules/","title":"Datentypen und Regeln","tags":[],"description":"","content":"Bevor du nun dein neues Wissen in die Praxis umsetzen kannst, solltest du noch zwei wichtige Konzepte kennenlernen.\n Datentypen Datentypen sind ein grundlegender Bestandteil jedes Computersystems. In der ein oder anderen Form begegnen sie dir überall, zum Beispiel bei Programmiersprachen oder auch bei Datenbanken.\n Mit einem Datentypen beschreiben wir die Art, also den Typ eines Datenwertes. Wir legen beispielsweise fest, dass der Wert Salzburg ein Text ist und der Wert 1000 eine Zahl.\n Hier ein paar Beispiele geläufiger Datentypen:\n   Ganze Zahl: int\n  (Text) Zeichenkette: char\n  Datum: date\n  Währung: money\n  …​\n   Datentypen legen also das Format eines Wertes fest.\n Datentypen in unseren Datenbanken In einer Tabelle legst du für jede Spalte einen Datentyp fest.\n Die Datentypen stellen sicher, dass Daten konsistent in die Tabelle eingegeben werden. Sie schützen dich damit vor der Eingabe falscher Daten.\n In eine Spalte mit dem Typ Ganzzahl int kannst du zum Beispiel nicht den Namen einer Person eingeben. Für den Namen einer Person benötigst du eine Spalte mit dem Datentyp Variable Zeichenkette varchar.\n Bevor du eine Spalten in einer Tabelle anlegst, musst du dir also zunächst Gedanken darüber machen, welche Art von Daten du in der Spalte speichern möchtest.\n Soll deine Spalte Nummern enthalten?\n   Möchtest du ganze Zahlen eintragen?\n  Möchtest du negative Zahlen eintragen?\n   Soll deine Spalte Text enthalten?\n   Wie lang darf der Text sein?\n  Möchtest du Sonderzeichen wie € oder ß eintragen?\n   Je nach Art der Daten benötigst du einen anderen Datentyp. Die Frage nach den Datentypen hilft dir dabei, eine gut strukturierte Datenbank aufzubauen.\n    Regeln Mit Regeln (Constraints) kannst du, zusätzlich zu den Datentypen, weitere Regeln festlegen, die deine Daten einhalten müssen, bevor sie in einer Tabelle gespeichert werden können.\n Du kannst zum Beispiel festlegen, dass es in einer Spalte keine doppelten Einträge geben darf. Constraints schützen dich damit, wie auch die Datentypen, vor der Eingabe falscher Daten.\n Hier einige Beispiele verschiedener Constraints:\n   Unique constraints: \u0026#34;Erlaube keine doppelten Werte in einer Spalte.\u0026#34;\n  Check constraints: \u0026#34;Das Versanddatum darf nicht vor dem Datum einer Bestellung liegen.\u0026#34;\n  Default values: Werte, die automatisch eingetragen werden, wenn kein anderer Wert angegeben ist. \u0026#34;In der Spalte Land soll zu Beginn immer Österreich stehen.\u0026#34;\n  NOT NULL constraint: Darf der Wert einer Spalte leer sein oder muss er befüllt werden?\n     "},{"uri":"https://training.andreaslongo.com/4-sql-language/solution/","title":"Lösung","tags":[],"description":"","content":"Erstelle eine Tabelle mit SQL Anweisungen -- Verbinde dich zu deiner Datenbank aus der ersten Aufgabe. USE MyBooks; -- Entferne die Tabelle aus deiner Datenbank DROP TABLE BookLocations; -- Erstelle die gleiche Tabelle erneut CREATE TABLE WhereAreMyBooks ( Title nvarchar(100) NOT NULL, Author nvarchar(100) NOT NULL, BookcaseLocation nvarchar(50) NOT NULL, ShelfNumber int NOT NULL ); -- Füge eine neue Spalte in die Tabelle ein ALTER TABLE WhereAreMyBooks ADD ISBN char(13) NULL ;     "},{"uri":"https://training.andreaslongo.com/5-more-sql/solution/","title":"Lösung","tags":[],"description":"","content":"Nutze SQL Anweisungen für die Arbeit mit Datensätzen -- Füge drei neue Datensätze in die Tabelle deiner Datenbank aus der ersten Aufgabe ein. USE MyBooks; INSERT INTO WhereAreMyBooks (Title, Author, BookLocations, ShelfNumber) VALUES (\u0026#39;Treasure Island\u0026#39;, \u0026#39;RL Stevenson\u0026#39;, \u0026#39;Bedroom\u0026#39;, 4), (\u0026#39;Cloud Atlas\u0026#39;, \u0026#39;David Mitchell\u0026#39;, \u0026#39;Bedroom\u0026#39;, 2), (\u0026#39;How to Lie with Maps\u0026#39;, \u0026#39;Mark Monnonier\u0026#39;, \u0026#39;Office Left\u0026#39;, 3) ; SELECT * FROM WhereAreMyBooks; -- Lösche einen der neuen Datensätze. DELETE FROM WhereAreMyBooks WHERE Title = \u0026#39;Treasure Island\u0026#39; -- Frage einige Daten mit dem `SELECT` Befehl ab. SELECT * FORM WhereAreMyBooks WHERE Author = \u0026#39;David Mitchell\u0026#39; SELECT * FORM WhereAreMyBooks WHERE BookcaseLocation = \u0026#39;office left\u0026#39; SELECT * FORM WhereAreMyBooks WHERE Title LIKE \u0026#39;%map%\u0026#39;     "},{"uri":"https://training.andreaslongo.com/3-database-server/views/","title":"Datenbank Views","tags":[],"description":"","content":"In relationalen Datenbanken werden Tabellen in thematisch gruppierte Datensätze aufgeteilt, zum Beispiel die Tabellen Produkte und Kunden. Die Datensätze werden mit Hilfe von Schlüsseln (Keys) zu neuen Ansichten kombiniert, zum Beispiel die Tabelle Bestellungen.\n Was sind Datenbank Views? SQL Server nutzt sogenannte Views um Datensätze aus mehreren Tabellen zu kombinieren, ohne die Datensätze in einer eigenen Tabelle zu speichern.\n In unserer Beispieldatenbank sehen wir einige vorbereitete Views. Du findest diese im Management Studio unterhalb der Datenbank im Punkt Views.\n Schaue dir nun die Ergebnisse eines Views mit Select Top 1000 Rows an. Du wirst sehen, dass die Ergebnisse sich nicht von einer Abfrage auf Tabellen unterscheidet.\n Es gibt jedoch einen entscheidenden Unterschied. Views speichern selbst keine Datensätze, sie sind also keine Tabellen. Views holen sich die Datensätze aus anderen Tabellen und stellen diese in einer benutzerdefinierten Ansicht zur Verfügung.\n Mit eigenen Views kannst du selbst entscheiden, welche Daten du aus welchen Tabellen sehen willst und wie die Daten angeordnet sein sollen.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/system-databases/","title":"Die System Datenbanken","tags":[],"description":"","content":"Im Management Studio, unter dem Punkt Databases siehst du den Punkt System Databases. Dort befinden sich die System Datenbanken zum Beispiel master, model und tempdb. Dies sind vorgefertigte Datenbanken, die jede SQL Instanz benötigt. Sie werden bei der Installation des DBMS erstellt.\n Du wirst nur recht selten direkt mit diesen Datenbanken zu tun haben. Es ist aber hilfreich zu wissen, wozu sie gut sind.\n Master Die master Datenbank enthält die Konfiguration und einige weitere Details deiner Instanz. Die Instanz nutzt diese für verschiedene internen Prozesse. Außerdem sind dort alle User Datenbanken eingetragen.\n Wenn du also eine neue Datenbank anlegst, wird diese in der master Datenbank vermerkt:\n master › Views › System Views › sys.databases › Select Top 1000 Rows\n   Model Die model Datenbank ist die Vorlage für alle neuen Datenbanken, die auf der Instanz angelegt werden. Wenn du Änderungen an der model Datenbank machst, bekommen alle Datenbanken, die du danach anlegst automatisch auch diese Änderungen. Das können Datenbank Einstellungen sein, aber auch vorgefertigte Inhalte in der Datenbank selbst.\n Erstelle zum Beispiel eine neue Tabelle temp mit der Spalte test (int) in der model Datenbank. Lege dann eine neue, leere Datenbank an. Du siehst, deine neue Datenbank hat nun automatisch eine Tabelle temp mit der Spalte test bekommen, wie von der model Datenbank vorgegeben.\n   MSDB Die msdb Datenbank wird vom SQL Server Agent verwendet. Der Agent ist für Automatisierungen zuständig. Du kannst damit zum Beispiel automatisch Backups deiner Datenbanken zu bestimmten Zeiten erstellen lassen. Der Agent wird auch für regelmäßige Wartungsarbeiten an deinen Datenbanken verwendet.\n   TempDB Zuletzt gibt es noch die tempdb Datenbank. Das ist ein temporärer Speicher, den deine Instanz für verschiedene Datenprozesse verwendet. Wenn du zum Beispiel deine Tabellen mit dem Designer änderst, werden die Änderungen zuerst in der tempdb zwischengespeichert, bevor sie endgültig auf deine Datenbank übertragen werden. Die tempdb wird bei jedem Neustart der Instanz geleert und neu aufgebaut.\n   "},{"uri":"https://training.andreaslongo.com/3-database-server/challenge/","title":"Aufgabe","tags":[],"description":"","content":"Erstelle deine eigene Datenbank Denke an die Typen von Informationen, die du speichern möchtest und beginne eine Datenbank um diese Anforderungen zu bauen.\n   Überlege dir eigene Anforderungen für deine Daten\n  Erstelle eine neue Datenbank\n  Erstelle eine Tabelle in der Datenbank\n  Füge einige Datensätze in deine Tabelle ein\n     "},{"uri":"https://training.andreaslongo.com/3-database-server/solution/","title":"Lösung","tags":[],"description":"","content":"Erstelle deine eigene Datenbank Datenbank: MyBooks\n Tabelle\n Table 1. BookLocations     Column Name Data Type Allow Nulls     Title\n nvarchar(100)\n    Author\n nvarchar(50)\n    BookcaseLocation\n nvarchar(50)\n    ShelfNumber\n int\n     Datensätze\n Table 2. BookLocations     Title Author BookcaseLocation ShelfNumber     Maphead\n Ken Jennings\n Office Left\n 2\n   The Bone Clocks\n David Mitchell\n Nightstand\n 1\n      "},{"uri":"https://training.andreaslongo.com/","title":"Einstieg Datenbanken","tags":[],"description":"","content":"Grundlagen und Praxis für IT-Experten  Einstieg Datenbanken "},{"uri":"https://training.andreaslongo.com/glossary/","title":"Begriffe","tags":[],"description":"","content":" Datenbank  Ein System zur elektronischen Datenverwaltung. Die wesentliche Aufgabe einer Datenbank ist es, große Datenmengen effizient, widerspruchsfrei und dauerhaft zu speichern und benötigte Teilmengen in unterschiedlichen, bedarfsgerechten Darstellungsformen für Benutzer und Anwendungsprogramme bereitzustellen.\n Datenbanksprache  Formale Sprachen, die für den Einsatz in Datenbanksystemen entwickelt wurden. Eine normierte Sprache für Relationale Datenbanksysteme ist SQL.\n Structured Query Language (SQL)  Eine Datenbanksprache zur Definition von Datenstrukturen in relationalen Datenbanken sowie zum Bearbeiten (Einfügen, Verändern, Löschen) und Abfragen von darauf basierenden Datenbeständen.\n Data Definition Language (DDL)  Ist Teil einer Datenbanksprache, der verwendet wird, um Datenstrukturen und verwandte Elemente zu beschreiben, zu ändern oder zu entfernen.\n Data Manipulation Language (DML)  Ist Teil einer Datenbanksprache, der verwendet wird, um Daten zu schreiben, zu lesen, zu ändern und zu löschen.\n Datenbankmanagementsystem (DBMS)  Ist die eingesetzte Software, die für das Datenbanksystem installiert und konfiguriert wird.\n CSV (Dateiformat)  CSV steht für Comma-separated values und beschreibt den Aufbau einer Textdatei zur Speicherung oder zum Austausch einfach strukturierter Daten. Die Dateinamensendung lautet meist .csv.\n Normalisierung  Die Aufteilung von Attributen (Tabellenspalten) in mehrere Relationen (Tabellen) gemäß den Normalisierungsregeln, so dass eine Form entsteht, die keine Redundanzen mehr enthält.\n Datenbankmodell  Die theoretische Grundlage für eine Datenbank und bestimmt, in welcher Struktur Daten in einem Datenbanksystem gespeichert werden. Das bekannteste und meistverbreitete Datenbankmodell ist das relationale Datenbankmodell, das tabellenbasiert ist.\n Relationale Datenbank  Eine digitale Datenbank, die auf einem tabellenbasierten relationalen Datenbankmodell basiert.\n   "},{"uri":"https://training.andreaslongo.com/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://training.andreaslongo.com/tags/","title":"Tags","tags":[],"description":"","content":""}]